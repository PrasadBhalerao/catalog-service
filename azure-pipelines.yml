# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  azureSubscription: 'mcart-app-demo-acr-arm-sc'
  dockerRegistryServiceConnection: 'mcart-app-demo-acr-docker-sc'
  imageRepository: 'catalogservice'
  containerRegistry: 'mcartacr1.azurecr.io'
  dockerfilePath: './CatalogService/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: CopyFiles@2
      displayName: 'Copy Deployment File'
      inputs:
        SourceFolder: '$(build.SourcesDirectory)/mcart-e-commerce-platform/manifests'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      continueOnError: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
    
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'Demo'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              downloadPath: '$(System.ArtifactsDirectory)'
              artifactName: 'drop'

              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

